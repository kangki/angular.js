@ngdoc overview
@name 개념적 개요
@description

# 개요

이 문서는 angular의 중요 콤포넌트 와 콤포넌트의 상호 작동에 대한 간결한 개념을 제공한다.
개념들은:

  * {@link concepts#startup 시작하기} - hello world 둘러보기
  * {@link concepts#runtime 런타임} - angular 런타임 개요
  * {@link concepts#scope 스코프} - 뷰 와 컨트롤러 사이의 연결
  * {@link concepts#controller 컨트롤러} - 어플리케이션 작동
  * {@link concepts#model 모델} - 어플리케이션 데이터
  * {@link concepts#view 뷰} - 사용자가 보는 것
  * {@link concepts#directives 지시자} - HTML 확장
  * {@link concepts#filters 필터} - 사용자 로컬 데이터 형식
  * {@link concepts#injector 인젝터} - 어플리케이션 조립
  * {@link concepts#module 모듈} - 인젝터 구성
  * {@link concepts#angular_namespace `$`} - angular 네임스페이스

<a name="startup"></a>
# 시작하기

angular를 시작 하는 방법 이다.(아래의 다이어그램 과 셈플 을 주목하자.):

<img class="pull-right" style="padding-left: 3em;" src="img/guide/concepts-startup.png">

  1. 브라우저는 HTML을 로드한 이후 DOM 내부를 구문 분석한다.
  2. 브라우저는 `angular.js`를 로드한다.
  3. Angular는 `DOMContentLoaded` 이벤트가 발생할 동안 대기 한다.
  4. Angular는 지정된 어플리케이션 영역에서
     {@link api/ng.directive:ngApp ng-app} 와 {@link guide/directive 지시자}를 찾는다.
  5. {@link api/ng.directive:ngApp ng-app} 안에 명시된 {@link guide/module 모듈}이 
     있는 경우에 모듈은 {@link api/AUTO.$injector $injector}를 구성하는 데 사용된다.
  6. {@link api/AUTO.$injector $injector}는 {@link api/ng.$rootScope $rootScope}에 
     포함되어 {@link api/ng.$compile $compile} 서비스 생성에 사용된다.
  7. {@link api/ng.$compile $compile} 서비스는 DOM을 컴파일하고, 
     {@link api/ng.$rootScope $rootScope}와 연결하는 데 사용된다.
  8. {@link api/ng.directive:ngInit ng-init} {@link guide/directive 지시자}는 
     {@link guide/scope 스코프} 안의 `name` 속성에 `World`를 할당한다.
  9. `{{name}}`은 `Hello World!`로 표시되기 위해 보간({@link api/ng.$interpolate interpolate})된다.

  보간 : 어떤 변수 또는 함수가 주어진 값으로 체워넣어짐

<div class="clear">
</div>
<example>
  <file name="index.html">
    <p ng-init=" name='World' ">Hello {{name}}!</p>
  </file>
</example>

<a name="runtime"></a>
# 런타임

<img class="pull-right" style="padding-left: 3em; padding-bottom: 1em;" src="img/guide/concepts-runtime.png">

아래의 다이어그램 과 셈플은 어떻게 Angular가 브라우저의 이벤트-루프와 상호작용하는지 묘사하고 있다.

  1. 이벤트는 사용자 상호작용 또는 타이머 이벤트 및 네트워크 이벤트(서버로부터의 응답)를 말한다.
     브라우저의 이벤트-루프는 이벤트가 도착할때 까지 대기한다.
  2. 이벤트의 콜백이 실행된다. 이것은 자바스크립트 문맥안으로 들어가며, 
     콜백은 DOM 구조를 변경할 수 있다.
  3. 콜백이 실행되면, 브라우저는 자바스크립트 문맥을 벗어난 이후에 
     DOM의 변화에 근거하여 화면을 다시 렌더링 한다.

Angular는 자신의 이벤트 처리 루프를 제공하여 자바스크립트의 흐름을 변경한다.
이것은 자바스크립트 내부의 클래식한 부분 과 Angular 실행 컨텍스트로 분할한다.
오로지 실행 컨텍스트 안에서 제공되는 명령들만이 Angular의 데이터 바인딩, 예외 처리, 속성 관찰, 기타...의 상황에 유용할 것이다. 
게다가 당신은 $apply()로 자바스크립트에서 발생하는 Angular의 예외 컨텍스트를 사용 할수있다.
대부분의 영역(컨트롤러, 서비스)안에서 염두해야 할 것은 이벤트를 처리하는 지시자에 의해 $apply는 이미 호출된다.



An explicit call to $apply is needed only when implementing custom event callbacks, or when working with a third-party library callbacks.

  1. Enter Angular 실행 컨텍스트 by calling {@link guide/scope 스코프}`.`{@link
     api/ng.$rootScope.Scope#$apply $apply}`(stimulusFn)`. Where `stimulusFn` is
     the work you wish to do in Angular 실행 컨텍스트.
  2. Angular executes the `stimulusFn()`, which typically modifies application state.
  3. Angular enters the {@link api/ng.$rootScope.Scope#$digest $digest} loop. The
     loop is made up of two smaller loops which process {@link
     api/ng.$rootScope.Scope#$evalAsync $evalAsync} queue and the {@link
     api/ng.$rootScope.Scope#$watch $watch} list. The {@link
     api/ng.$rootScope.Scope#$digest $digest} loop keeps iterating until the model
     stabilizes, which means that the {@link api/ng.$rootScope.Scope#$evalAsync
     $evalAsync} queue is empty and the {@link api/ng.$rootScope.Scope#$watch
     $watch} list does not detect any changes.
  4. The {@link api/ng.$rootScope.Scope#$evalAsync $evalAsync} queue is used to
     schedule work which needs to occur outside of current stack frame, but before the browser's
     view render. This is usually done with `setTimeout(0)`, but the `setTimeout(0)` approach
     suffers from slowness and may cause view flickering since the browser renders the view after
     each event.
  5. The {@link api/ng.$rootScope.Scope#$watch $watch} list is a set of expressions
     which may have changed since last iteration. If a change is detected then the `$watch`
     function is called which typically updates the DOM with the new value.
  6. Once the Angular {@link api/ng.$rootScope.Scope#$digest $digest} loop finishes
     the execution leaves the Angular and JavaScript context. This is followed by the browser
     re-rendering the DOM to reflect any changes.


Here is the explanation of how the `Hello wold` example achieves the data-binding effect when the
user enters text into the text field.

  1. During the compilation phase:
     1. the {@link api/ng.directive:ngModel ng-model} and {@link
        api/ng.directive:input input} {@link guide/directive
        directive} set up a `keydown` listener on the `<input>` control.
     2. the {@link api/ng.$interpolate &#123;&#123;name&#125;&#125; } interpolation
        sets up a {@link api/ng.$rootScope.Scope#$watch $watch} to be notified of
        `name` changes.
  2. During the runtime phase:
     1. Pressing an '`X`' key causes the browser to emit a `keydown` event on the input control.
     2. The {@link api/ng.directive:input input} directive
        captures the change to the input's value and calls {@link
        api/ng.$rootScope.Scope#$apply $apply}`("name = 'X';")` to update the
        application model inside the Angular 실행 컨텍스트.
     3. Angular applies the `name = 'X';` to the model.
     4. The {@link api/ng.$rootScope.Scope#$digest $digest} loop begins
     5. The {@link api/ng.$rootScope.Scope#$watch $watch} list detects a change
        on the `name` property and notifies the {@link api/ng.$interpolate
        &#123;&#123;name&#125;&#125; } interpolation, which in turn updates the DOM.
     6. Angular exits the 실행 컨텍스트, which in turn exits the `keydown` event and with it
        the JavaScript execution context.
     7. The browser re-renders the view with update text.

<div class="clear">
</div>
<example>
  <file name="index.html">
    <input ng-model="name">
    <p>Hello {{name}}!</p>
  </file>
</example>

<a name="scope"></a>
# 스코프

{@link guide/scope 스코프}는 is responsible for detecting changes to the model section and
provides the execution context for expressions. The scopes are nested in a hierarchical structure
which closely follow the DOM structure. (See individual directive documentation to see which
directives cause a creation of new scopes.)

The following example demonstrates how `name` {@link guide/expression expression} will evaluate
into different value depending on which scope it is evaluated in. The example is followed by
a diagram depicting the scope boundaries.

<div class="clear">
</div>
<div class="show-scope">
<example>
  <file name="index.html">
    <div ng-controller="GreetCtrl">
      Hello {{name}}!
    </div>
    <div ng-controller="ListCtrl">
      <ol>
        <li ng-repeat="name in names">{{name}}</li>
      </ol>
    </div>
  </file>
  <file name="script.js">
    function GreetCtrl($scope) {
      $scope.name = 'World';
    }

    function ListCtrl($scope) {
      $scope.names = ['Igor', 'Misko', 'Vojta'];
    }
  </file>
  <file name="style.css">
    .show-scope .doc-example-live.ng-scope,
    .show-scope .doc-example-live .ng-scope  {
      border: 1px solid red;
      margin: 3px;
    }
  </file>
</example>
</div>

<img class="center" src="img/guide/concepts-scope.png">


<a name="controller"></a>
# 컨트롤러

<img class="pull-right" style="padding-left: 3em; padding-bottom: 1em;" src="img/guide/concepts-controller.png">

A controller is the code behind the view. Its job is to construct the model and publish it to the
view along with callback methods. The view is a projection of the scope onto the template (the
HTML). The scope is the glue which marshals the model to the view and forwards the events to the
controller.

The separation of the controller and the view is important because:

  * The controller is written in JavaScript. JavaScript is imperative. Imperative is a good fit
    for specifying application behavior. The controller should not contain any rendering
    information (DOM references or HTML fragments).
  * The view template is written in HTML. HTML is declarative. Declarative is a good fit for
    specifying UI. The View should not contain any behavior.
  * Since the controller is unaware of the view, there could be many views for the same
    controller. This is important for re-skinning, device specific views (i.e. mobile vs desktop),
    and testability.

<div class="clear">
</div>
<example>
  <file name="index.html">
    <div ng-controller="MyCtrl">
      Hello {{name}}!
      <button ng-click="action()">
        OK
      </button>
    </div>
  </file>
  <file name="script.js">
    function MyCtrl($scope) {
      $scope.action = function() {
        $scope.name = 'OK';
      }

      $scope.name = 'World';
    }
  </file>
</example>


<a name="model"></a>
# 모듈

<img class="pull-right" style="padding-left: 3em; padding-bottom: 1em;" src="img/guide/concepts-model.png">

The model is the data which is used merged with the template to produce the view. To be able to
render the model into the view, the model has to be able to be referenced from the scope. Unlike many
other frameworks Angular makes no restrictions or requirements on the model. There are no classes
to inherit from or special accessor methods for accessing or changing the model. The model can be
primitive, object hash, or a full object Type. In short the model is a plain JavaScript object.


<div class="clear">
</div>


<a name="view"></a>
# 뷰

<img class="pull-right" style="padding-left: 3em; padding-bottom: 1em;" src="img/guide/concepts-view.png">

The view is what the user sees. The view begins its life as a template, is merged with the
model and finally rendered into the browser DOM. Angular takes a very different approach to
rendering the view compared to most other templating systems.

  * **Others** - Most templating systems begin as an HTML string with special templating markup.
    Often the template markup breaks the HTML syntax which means that the template can not be
    edited by an HTML editor. The template string is then parsed by the template engine, and
    merged with the data. The result of the merge is an HTML string. The HTML string is then
    written to the browser using the `.innerHTML`, which causes the browser to render the HTML.
    When the model changes the whole process needs to be repeated. The granularity of the template
    is the granularity of the DOM updates. The key here is that the templating system manipulates
    strings.
  * **Angular** - Angular is different, since its templating system works on DOM objects not on
    strings. The template is still written in an HTML string, but it is HTML (not HTML with
    template sprinkled in.) The browser parses the HTML into the DOM, and the DOM becomes the input to
    the template engine known as the {@link api/ng.$compile compiler}. The compiler
    looks for {@link guide/directive 지시자} which in turn set up {@link
    api/ng.$rootScope.Scope#$watch watches} on the model. The result is a
    continuously updating view which does not need template model re-merging. Your model becomes
    the single source-of-truth for your view.

<div class="clear">
</div>

<example>
  <file name="index.html">
    <div ng-init="list = ['Chrome', 'Safari', 'Firefox', 'IE'] ">
      <input ng-model="list" ng-list> <br>
      <input ng-model="list" ng-list> <br>
      <pre>list={{list}}</pre> <br>
      <ol>
        <li ng-repeat="item in list">
          {{item}}
        </li>
      </ol>
    </div>
  </file>
</example>


<a name="directives"></a>
# 지시자

A directive is a behavior or DOM transformation which is triggered by the presence of a custom attribute,
element name, or a class name. A directive allows you to extend the HTML vocabulary in a
declarative fashion. Following is an example which enables data-binding for the `contenteditable`
in HTML.

<example module="directive">
  <file name="script.js">
    angular.module('directive', []).directive('contenteditable', function() {
      return {
        require: 'ngModel',
        link: function(scope, elm, attrs, ctrl) {
          // view -> model
          elm.bind('blur', function() {
            scope.$apply(function() {
              ctrl.$setViewValue(elm.html());
            });
          });

          // model -> view
          ctrl.$render = function(value) {
            elm.html(value);
          };

          // load init value from DOM
          ctrl.$setViewValue(elm.html());
        }
      };
    });
  </file>
  <file name="index.html">
    <div contentEditable="true" ng-model="content">Edit Me</div>
    <pre>model = {{content}}</pre>
  </file>
  <file name="style.css">
    div[contentEditable] {
      cursor: pointer;
      background-color: #D0D0D0;
      margin-bottom: 1em;
      padding: 1em;
    }
  </file>
</example>

<a name="filters"></a>
# 필터

{@link api/ng.$filter Filters} perform data transformation. Typically
they are used in conjunction with the locale to format the data in locale specific output.
They follow the spirit of UNIX filters and use similar syntax `|` (pipe).

<example>
  <file name="index.html">
    <div ng-init="list = ['Chrome', 'Safari', 'Firefox', 'IE'] ">
      Number formatting: {{ 1234567890 | number }} <br>
      array filtering <input ng-model="predicate">
      {{ list | filter:predicate | json }}
    </div>
  </file>
</example>


<a name="module"></a>
<a name="injector"></a>
# 모듈 과 인젝터

<img class="pull-right" style="padding-left: 3em; padding-bottom: 1em;" src="img/guide/concepts-module-injector.png">

The {@link api/AUTO.$injector injector} is a service locator. There is a single
{@link api/AUTO.$injector injector} per Angular {@link
api/ng.directive:ngApp application}. The {@link
api/AUTO.$injector injector} provides a way to look up an object instance by its
name. The injector keeps an internal cache of all objects so that repeated calls to get the same
object name result in the same instance. If the object does not exist, then the {@link
api/AUTO.$injector injector} asks the instance factory to create a new instance.

A {@link api/angular.Module module} is a way to configure the injector's instance factory, known
as a {@link api/AUTO.$provide provider}.

<div class='clear'></div>
<pre>
  // 모듈 생성
  var myModule = angular.module('myModule', [])

  // Configure the injector
  myModule.factory('serviceA', function() {
    return {
      // instead of {}, put your object creation here
    };
  });

  // create an injector and configure it from 'myModule'
  var $injector = angular.injector(['myModule']);

  // retrieve an object from the injector by name
  var serviceA = $injector.get('serviceA');

  // always true because of instance cache
  $injector.get('serviceA') === $injector.get('serviceA');
</pre>


But the real magic of the {@link api/AUTO.$injector injector} is that it can be
used to {@link api/AUTO.$injector#invoke call} methods and {@link
api/AUTO.$injector#instantiate instantiate} types. This subtle feature is what
allows the methods and types to ask for their dependencies instead of having to look for them.

<pre>
  // You write functions such as this one.
  function doSomething(serviceA, serviceB) {
    // 이곳에 입력하세요.
  }

  // Angular provides the injector for your application
  var $injector = ...;

  ///////////////////////////////////////////////
  // the old-school way of getting dependencies.
  var serviceA = $injector.get('serviceA');
  var serviceB = $injector.get('serviceB');

  // now call the function
  doSomething(serviceA, serviceB);

  ///////////////////////////////////////////////
  // the cool way of getting dependencies.
  // the $injector will supply the arguments to the function automatically
  $injector.invoke(doSomething); // This is how the framework calls your functions
</pre>

Notice that the only thing you needed to write was the function, and list the dependencies in the
function arguments. When angular calls the function, it will use the {@link
api/AUTO.$injector#invoke call} which will automatically fill the function
arguments.

Examine the `ClockCtrl` bellow, and notice how it lists the dependencies in the constructor. When the
{@link api/ng.directive:ngController ng-controller} instantiates
the controller it automatically provides the dependencies. There is no need to create
dependencies, look for dependencies, or even get a reference to the injector.

<example module="timeExampleModule">
  <file name="index.html">
    <div ng-controller="ClockCtrl">
      Current time is: {{ time.now }}
    </div>
  </file>
  <file name="script.js">
    angular.module('timeExampleModule', []).
      // Declare new object called time,
      // which will be available for injection
      factory('time', function($timeout) {
        var time = {};

        (function tick() {
          time.now = new Date().toString();
          $timeout(tick, 1000);
        })();
        return time;
      });

    // Notice that you can simply ask for time
    // and it will be provided. No need to look for it.
    function ClockCtrl($scope, time) {
      $scope.time = time;
    }
  </file>
</example>


<a name="angular_namespace"></a>
# Angular 네임스페이스

Angular는 객체의 이름 앞에 잠제적으로 충돌할 수 있는 `$`가 붙어있다.
실수에 의한 이름 충돌을 방지하려면, 
당신의 코드 안에서 Angular 코드 와 우연히 충돌 할수 있으므로 `$` 접두어를 사용하지 마십시오.
 